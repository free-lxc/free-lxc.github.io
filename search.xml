<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js中的api</title>
      <link href="/2023/07/07/js%E4%B8%AD%E7%9A%84api/"/>
      <url>/2023/07/07/js%E4%B8%AD%E7%9A%84api/</url>
      
        <content type="html"><![CDATA[<p>在js中，无论是数组，字符串，还是对象，我们都需要对其进行操作，而这，便必不可少的需要用到相对应的api，也是我们平常做题乃至面试会遇到的。</p><h3 id="字符串篇"><a href="#字符串篇" class="headerlink" title="字符串篇"></a>字符串篇</h3><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>length属性 -可以用来获取字符串的长度</li><li>charAt(0) -可以返回字符串中指定位置的字符,根据索引获取具体的值</li><li>charCodeAt() -获取指定位置字符的字符编码(Unicode编码)</li><li>String.fromCharCode() -根据字符编码获取字符,有时候需要转换进制</li><li>a.concat(b) -用来连接两个或多个字符串，与+作用一样</li><li>indexOf(字符,value) -该方法用来检索一个字符串中是否含有指定内容，含有则返回索第一次出现的索引值，没有返回-1；-指定一个值，指定开始查找的位置</li><li>listIndexOf() -该方法从后往前找是否含有指定内容，返回索</li><li>slice(start,end) -可以从字符串中截取指定的内容,不会影响原截取值，不取到末尾值-如果省略最后一个参数，则会截取到最后一个</li><li>substring() 用来截取一个字符串，与slice()类似，不同的是不能接收负值，而且会自动调整参数位置，如果第一个参数小于第二个，会自动调整位置</li><li>substr(start,count); -第一个值是开始的位置，第二个位置是截取的数量 </li><li>split(字符串) -将一个字符串拆分为数组，根据字符串拆分为数组</li><li>toUpperCase() -将字符串转换为大写并返回</li><li>toLowerCase() -将字符串转换为小写并返回</li></ol><h4 id="对于字符串的操作"><a href="#对于字符串的操作" class="headerlink" title="对于字符串的操作"></a>对于字符串的操作</h4><ol><li><h5 id="遍历字符串的方法"><a href="#遍历字符串的方法" class="headerlink" title="遍历字符串的方法"></a>遍历字符串的方法</h5><ol><li><p>使用for循环</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const str = &#x27;Hello World&#x27;;</span><br><span class="line">for (let i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">  console.log(str.charAt(i)); // 输出每个字符</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用for…of循环遍历字符串</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const str = &#x27;Hello World&#x27;;</span><br><span class="line"></span><br><span class="line">for (let char of str) &#123;</span><br><span class="line">  console.log(char); // 输出每个字符</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用forEach方法遍历字符串（将字符串转为数组）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const str = &#x27;Hello World&#x27;;</span><br><span class="line"></span><br><span class="line">Array.from(str).forEach(char =&gt; &#123;</span><br><span class="line">  console.log(char); // 输出每个字符</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用split方法将字符串转为数组，然后使用forEach遍历</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const str = &#x27;Hello World&#x27;;</span><br><span class="line"></span><br><span class="line">str.split(&#x27;&#x27;).forEach(char =&gt; &#123;</span><br><span class="line">  console.log(char); // 输出每个字符</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li><li><h5 id="查询字符串中时候含有某个字符"><a href="#查询字符串中时候含有某个字符" class="headerlink" title="查询字符串中时候含有某个字符"></a>查询字符串中时候含有某个字符</h5><ol><li><p>利用字符串的<code>includes</code>方法来判断一个字符串中是否包含某个字符。这个方法返回一个布尔值，表示字符串是否包含指定的字符。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const str = &#x27;Hello World&#x27;;</span><br><span class="line"></span><br><span class="line">console.log(str.includes(&#x27;e&#x27;)); // 输出 true，因为字符串中包含字符 &#x27;e&#x27;</span><br><span class="line"></span><br><span class="line">console.log(str.includes(&#x27;z&#x27;)); // 输出 false，因为字符串中不包含字符 &#x27;z&#x27;</span><br></pre></td></tr></table></figure></li><li><p>利用<code>indexOf</code>方法。它返回指定字符第一次出现的索引，如果未找到则返回-1；如果找到，则会返回具体的索引</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const str = &#x27;Hello World&#x27;;</span><br><span class="line"></span><br><span class="line">console.log(str.indexOf(&#x27;W&#x27;)); // 输出 6，因为字符 &#x27;W&#x27; 在索引 6 处</span><br><span class="line"></span><br><span class="line">console.log(str.indexOf(&#x27;z&#x27;)); // 输出 -1，因为字符 &#x27;z&#x27; 不存在</span><br></pre></td></tr></table></figure></li></ol></li><li><h5 id="易混方法的区分"><a href="#易混方法的区分" class="headerlink" title="易混方法的区分"></a>易混方法的区分</h5><ol><li><p>slice split：两者均不会改变原字符串。slice返回的是是一个新字符串，split返回的是一个新数组</p><p><strong>split方法：</strong></p><p><code>split</code>方法用于将字符串拆分成子字符串，并返回一个新数组。拆分的依据可以是指定的分隔符或正则表达式。可以将一个字符串拆分成多个子字符串，并使用数组进行进一步操作。</p><p>语法：string.split(separator, limit);</p><ul><li><code>separator</code>：可选参数，指定用于拆分字符串的分隔符。可以是字符串或正则表达式。如果不提供该参数，则将整个字符串作为一个元素存储在数组中。</li><li><code>limit</code>：可选参数，指定返回的子字符串数量的上限。如果提供了该参数，则最终的数组长度最多为<code>limit+1</code>。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const str = &#x27;apple,banana,cherry,date&#x27;;</span><br><span class="line"></span><br><span class="line">const arr = str.split(&#x27;,&#x27;);</span><br><span class="line"></span><br><span class="line">console.log(arr); // 输出 [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;date&#x27;]</span><br></pre></td></tr></table></figure><p><strong>slice方法：</strong></p><p><code>slice</code>方法用于从字符串中提取子字符串，并返回一个新字符串。它接受两个参数，<code>start</code>和<code>end</code>，用于指定要提取子字符串的开始和结束位置（不包括结束位置的字符）。</p><p>语法：string.slice(start, end);</p><ul><li><code>start</code>：必需参数，指定从哪个索引位置开始提取子字符串。如果是负数，则从字符串末尾开始计算。</li><li><code>end</code>：可选参数，指定提取子字符串的结束位置（不包括该位置的字符）。如果省略该参数，则提取到字符串的末尾。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const str = &#x27;Hello World&#x27;;</span><br><span class="line"></span><br><span class="line">const slicedStr = str.slice(6, 11);</span><br><span class="line"></span><br><span class="line">console.log(slicedStr); // 输出 &#x27;World&#x27;</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为工作全力以赴</title>
      <link href="/2023/06/20/%E4%B8%BA%E5%B7%A5%E4%BD%9C%E5%85%A8%E5%8A%9B%E4%BB%A5%E8%B5%B4/"/>
      <url>/2023/06/20/%E4%B8%BA%E5%B7%A5%E4%BD%9C%E5%85%A8%E5%8A%9B%E4%BB%A5%E8%B5%B4/</url>
      
        <content type="html"><![CDATA[<p>入行前端许久，近期在找工作，发现js还是最基础也是最重要的，是贯穿一生的。</p><h3 id="接下来需要做的工作"><a href="#接下来需要做的工作" class="headerlink" title="接下来需要做的工作"></a>接下来需要做的工作</h3><ol><li><p>安排好租房事宜，尽快报道上班，让实习走到正规</p></li><li><p>为秋招做准备，不可以像找实习一样杂乱无章</p><ul><li>常见的面试题<ul><li>React</li><li>Vue</li><li>Js</li><li>计算机网络</li><li>数据结构</li></ul></li><li>算法-力扣上中等偏难的题</li></ul></li><li><p>充实博客，在简历上可以拿的出手</p></li><li><p>努力学习，天天向上</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.error(&#x27;努力学习，天天向上！！！&#x27;)</span><br></pre></td></tr></table></figure><h3 id="6-24号"><a href="#6-24号" class="headerlink" title="6.24号"></a>6.24号</h3><p>今日成功入住租的房间，明天去报道，新的篇章即将拉开序幕！！！</p>]]></content>
      
      
      <categories>
          
          <category> 实习前传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>one</title>
      <link href="/2023/06/16/one/"/>
      <url>/2023/06/16/one/</url>
      
        <content type="html"><![CDATA[<p> 前端路未定，我来淌！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 我的第一篇博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/16/hello-world/"/>
      <url>/2023/06/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="hexo三部曲"><a href="#hexo三部曲" class="headerlink" title="hexo三部曲"></a>hexo三部曲</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>将所有修改的地方部署到github上</p><h3 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:4000/">枫叶湾</a></p><h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new 文章名</span><br><span class="line">文章在\Blog\<span class="built_in">source</span>\_posts中，修改文章</span><br><span class="line">随后执行三部曲即可</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h4 id="博客头设置"><a href="#博客头设置" class="headerlink" title="博客头设置"></a>博客头设置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">tital: 博客题目</span><br><span class="line">cover: 博客图片(/img/1.png或图片链接)</span><br><span class="line">categories: 博客分类</span><br><span class="line">tags: 博客标签</span><br><span class="line">top: true(文章是否被定值)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
